/**
 * 1.0.x  : release
 */
def ARTIFACT_VERSION = "1.0"
def ARTIFACT_NAME = file(".").absoluteFile.name
def ARTIFACT_INSTALL_TARGET = getArtifactInstallTarget()

apply plugin: 'groovy'

repositories {
    maven { url "http://eaglesakura.github.io/maven/" }
    mavenCentral()
}


configurations {
    groovyDoc
}

dependencies {
    compile gradleApi()
    groovyDoc 'org.codehaus.groovy:groovy-groovydoc:2.3.3'
    groovyDoc 'org.codehaus.groovy:groovy-ant:2.3.3'
    compile 'commons-codec:commons-codec:1.10'
    testCompile group: 'junit', name: 'junit', version: '4.11'

    // Codegen main
    compile 'com.eaglesakura:simple-logger:1.1.+'
    compile 'com.eaglesakura:simple-utils:1.1.+'
    compile 'io.swagger:swagger-parser:1.0.25'
    compile 'io.swagger:swagger-compat-spec-parser:1.0.25'
    compile 'io.swagger:swagger-core:1.5.12'
    compile 'com.samskivert:jmustache:1.13'
    compile 'commons-io:commons-io:2.5'
    compile 'org.slf4j:slf4j-ext:1.7.24'
    compile 'org.slf4j:slf4j-api:1.7.24'
    compile 'org.slf4j:slf4j-simple:1.7.24'
    compile 'org.apache.commons:commons-lang3:3.5'
    compile 'commons-cli:commons-cli:1.3.1'
    compile 'io.airlift:airline:0.7'
    compile 'com.googlecode.lambdaj:lambdaj:2.3.3'
}

apply plugin: 'maven'

groovydoc {
    groovyClasspath = configurations.groovyDoc
}
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task groovydocJar(type: Jar, dependsOn: groovydoc) {
    classifier = 'javadoc'
    from "${buildDir}/docs/groovydoc"
}

artifacts {
    archives sourcesJar
    archives groovydocJar
}

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: uri(ARTIFACT_INSTALL_TARGET))
            pom.version = ARTIFACT_VERSION + getArtifactVersionSuffix()
            pom.groupId = "com.eaglesakura"
            pom.artifactId = file(".").absoluteFile.name;
        }
    }
}

task uploadGroovydoc << {
    def src = file("build/docs/groovydoc/");
    def dst = new File("${ARTIFACT_INSTALL_TARGET.absolutePath}/doc/${ARTIFACT_NAME}/");
    dst.deleteDir();
    dst.mkdirs();

    ["/usr/bin/rsync", "-a", src.absolutePath, dst.absolutePath].execute().text;
}

/**
 * 依存している固定ライブラリバージョンを取得する
 */
String dependenciesVersion(String libName, String defVersion) {
    def lines = [];
    def target = file("dependencies.txt");
    if (!target.file) {
        return defVersion;
    }

    target.text.eachLine {
        if (!it.contains(libName) || it.contains("(")) {
            return;
        }

        def tokens = it.split(" ");
        if (tokens == null || tokens.length == 0) {
            return;
        }

        lines += tokens[tokens.length - 1];
    }
    if (lines.empty) {
        println("${libName} -> ${defVersion}")
        return defVersion;
    } else {
        println("${libName} -> ${lines[0]}")
        return lines[0];
    }
}

/**
 * バージョンを取得する
 * CircleCIの場合、バージョン末尾にビルド番号を付与する
 */
def getArtifactVersionSuffix() {
    if (System.env.CIRCLE_BUILD_NUM != null) {
        // CircleCIのバージョンが指定されているので、そちらを利用する
        return ".${System.env.CIRCLE_BUILD_NUM}"
    } else {
        return ".local"
    }
}

/**
 * Mavenの格納先を確定する
 */
def getArtifactInstallTarget() {
    if (file("maven").directory) {
        return file("maven");
    } else if (System.env.CIRCLE_ARTIFACTS != null) {
        return file(System.env.CIRCLE_ARTIFACTS);
    } else if (System.env.MAVEN_LOCAL_REPO != null) {
        return file(System.env.MAVEN_LOCAL_REPO);
    } else {
        return file("ci-release");
    }
}
