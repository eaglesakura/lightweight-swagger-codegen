import java.nio.file.Files
import java.nio.file.Paths

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.5'
    }
}

apply plugin: 'groovy'
apply from: "configure.gradle.kts"

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
    maven { url "https://dl.bintray.com/eaglesakura/maven/" }
}


configurations {
    groovyDoc
}

dependencies {
    implementation gradleApi()
    implementation 'org.codehaus.groovy:groovy:2.3.3'
    groovyDoc 'org.codehaus.groovy:groovy-groovydoc:2.3.3'
    groovyDoc 'org.codehaus.groovy:groovy-ant:2.3.3'
    implementation 'commons-codec:commons-codec:1.10'
    testImplementation group: 'junit', name: 'junit', version: '4.11'

    // Codegen main
    implementation 'com.eaglesakura:java-commons:2.0.3'
    implementation 'io.swagger:swagger-parser:1.0.25'
    implementation 'io.swagger:swagger-compat-spec-parser:1.0.25'
    implementation 'io.swagger:swagger-core:1.5.12'
    implementation 'com.samskivert:jmustache:1.13'
    implementation 'commons-io:commons-io:2.5'
    implementation 'org.slf4j:slf4j-ext:1.7.24'
    implementation 'org.slf4j:slf4j-api:1.7.24'
    implementation 'org.slf4j:slf4j-simple:1.7.24'
    implementation 'org.apache.commons:commons-lang3:3.5'
    implementation 'commons-cli:commons-cli:1.3.1'
    implementation 'io.airlift:airline:0.7'
    implementation 'com.googlecode.lambdaj:lambdaj:2.3.3'
}

/**
 * build option "-Pexecutable"
 * e.g.)
 * $ ./gradlew jar -Pexecutable
 */
if (hasProperty("executable")) {
    println("output jar will has all libraries.")
    jar {
        manifest {
            attributes "Main-Class": "com.eaglesakura.swagger.generator.Generator"
        }
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
        from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

task dockerArtifacts(dependsOn: jar) {
    group "docker"
    doLast {
        def jarFile = fileTree("build/libs").find { it.getName().endsWith(".jar") } as File
        if (jarFile == null) {
            throw FileNotFoundException("executable not found")
        }

        println("include target: ${jarFile}")
        def dst = file("docker/swagger-codegen.jar")
        dst.getParentFile().mkdirs()
        dst.delete()
        Files.copy(Paths.get(jarFile.absolutePath), Paths.get(dst.absolutePath))
    }
}

group = artifact_group
version = artifact_version
apply plugin: 'maven'
apply plugin: 'com.jfrog.bintray'

groovydoc {
    groovyClasspath = configurations.groovyDoc
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task groovydocJar(type: Jar, dependsOn: groovydoc) {
    classifier = 'javadoc'
    from "${buildDir}/docs/groovydoc"
}


artifacts {
    archives sourcesJar
    archives groovydocJar
}

if (project.hasProperty("install_snapshot")) {
    println("deploy to mavenLocal()")
    uploadArchives {
        repositories {
            mavenDeployer {
                pom.artifactId = artifact_name
                repository(url: "file://${System.getProperty('user.home')}/.m2/repository")
            }
        }
    }
} else {
    println("deploy to bintray.")
    bintray {
        user = bintray_user
        key = System.env.BINTRAY_API_KEY
        publish = true
        override = true
        pkg {
            repo = "maven"
            name = artifact_name
            vcsUrl = bintray_vcs_url
            issueTrackerUrl = "${bintray_vcs_url}/issues"
            licenses = ["MIT"]
            labels = bintray_labels
            version {
                name = project.version
                released = new Date()
                gpg {
                    sign = true
                    passphrase = System.env.BINTRAY_GPG_PASS
                }
            }
        }
        configurations = ['archives']
    }
}


println ":${project.name}:bintrayUpload  -> ${artifact_group} : ${version}"
println ":${project.name}:uploadArchives -> file:${System.getProperty('user.home')}/.m2/repository : ${version}"
