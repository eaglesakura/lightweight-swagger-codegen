package {{packageName}}

import (
	"net/http"
	"github.com/eaglesakura/swagger-go-core"
)

{{#models}}{{#imports}}
import ({{/imports}}{{#imports}}
	"{{import}}"{{/imports}}{{#imports}}
)
{{/imports}}{{#model}}


{{#vars}}{{#isEnum}}
{{#allowableValues}}{{#values}}
const {{classname}}_{{datatypeWithEnum}}_{{.}} string = "{{.}}"{{/values}}
{{/allowableValues}}
var {{classname}}_{{datatypeWithEnum}} []string = []string{
{{#allowableValues}}{{#values}}
    {{classname}}_{{datatypeWithEnum}}_{{.}}, {{/values}}
{{/allowableValues}}
}
{{/isEnum}}{{/vars}}

// {{{description}}}
type {{classname}} struct {
{{#vars}}{{#description}}
	// {{{description}}}{{/description}}
	{{name}} *{{{datatype}}} `json:"{{baseName}}{{^required}},omitempty{{/required}}"`
{{/vars}}
}

func (it *{{classname}}) Valid(factory swagger.ValidatorFactory) bool {
    {{#vars}}
    if(!factory.NewValidator(it.{{name}}, it.{{name}} == nil).
                {{#required}}Required(true).{{/required}}
                {{#pattern}}Pattern("{{pattern}}").{{/pattern}}{{#minLength}}MinLength({{minLength}}).{{/minLength}}{{#maxLength}}MinLength({{maxLength}}).{{/maxLength}}
                {{#isEnum}}EnumPattern({{classname}}_{{datatypeWithEnum}}).{{/isEnum}}
                Valid(factory)) {
        return false;
    }
    {{/vars}}

    return true
}

func (it *{{classname}}) WriteResponse(writer http.ResponseWriter, producer swagger.Producer) {
	writer.WriteHeader(200)
	if err := producer.Produce(writer, it); err != nil  {
		panic(err) // let the recovery middleware deal with this
	}
}

{{/model}}{{/models}}
