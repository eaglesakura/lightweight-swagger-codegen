package {{packageName}}

import (
	"gaefire"
	"net/http"
	"github.com/go-openapi/runtime"
)

{{#models}}{{#imports}}
import ({{/imports}}{{#imports}}
	"{{import}}"{{/imports}}{{#imports}}
)
{{/imports}}{{#model}}{{#description}}

// {{{description}}}{{/description}}
type {{classname}} struct {
{{#vars}}{{#description}}
	// {{{description}}}{{/description}}
	{{name}} *{{{datatype}}} `json:"{{baseName}}{{^required}},omitempty{{/required}}"`
{{/vars}}
}

func (it *{{classname}}) Valid() bool {
    {{#vars}}
    if(!gaefire.NewValidator(it.{{name}}).{{#required}}Required(true).{{/required}}{{#pattern}}Pattern("{{pattern}}").{{/pattern}}{{#minLength}}MinLength({{minLength}}).{{/minLength}}{{#maxLength}}MinLength({{maxLength}}).{{/maxLength}}
                Valid()) {
        return false;
    }
    {{/vars}}

    return true
}

func (it *{{classname}}) WriteResponse(writer http.ResponseWriter, producer runtime.Producer) {
	writer.WriteHeader(200)
	if err := producer.Produce(writer, it); err != nil || !it.Valid()  {
		panic(err) // let the recovery middleware deal with this
	}
}

{{/model}}{{/models}}
