package {{modelPackage}}

import {{apiPackage}}.* // ktlint-disable
import java.math.* // ktlint-disable
import java.util.* // ktlint-disable
import java.io.* // ktlint-disable
import com.squareup.moshi.* // ktlint-disable
import retrofit2.* // ktlint-disable
import retrofit2.http.* // ktlint-disable
import java.lang.reflect.Type

object ApiEnumFactory : JsonAdapter.Factory {
    {{#models}}{{#model}}{{#isEnum}}
    val {{classname}}Adapter = object : JsonAdapter<{{classname}}>() {
        @Throws(IOException::class)
        override fun fromJson(reader: JsonReader): {{classname}} {
            return {{classname}}.parse(reader.nextString())
        }

        @Throws(IOException::class)
        override fun toJson(writer: JsonWriter, value: {{classname}}?) {
            if(value == null) {
                return
            }
            writer.value(value.toString())
        }

        override fun toString(): String {
            return "JsonAdapter({{classname}})"
        }
    }
    {{/isEnum}}{{/model}}{{/models}}
    override fun create(type: Type, annotations: Set<out Annotation>, moshi: Moshi): JsonAdapter<*>? {
        return when(type) {
            {{#models}}{{#model}}{{#isEnum}}
                {{classname}}::class.java -> {{classname}}Adapter
            {{/isEnum}}{{/model}}{{/models}}
            else -> null
        }
    }
}